{"version":3,"sources":["Components/SetValueCounter/EntryDisplay/EntryDisplay.module.css","App.module.css","Components/Counter/Display/Display.module.css","Components/Counter/Button/Button.module.css","Components/Counter/Display/Display.tsx","Components/Counter/Button/Button.tsx","Components/SetValueCounter/EntryDisplay/EntryDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","className","s","inputWrapper","type","value","displayValue","maxValue","default","error","Button","buttonsWrapper","onClick","onButtonClick","disabled","button","name","EntryDisplay","valueWrapper","text1","onChange","onChangeMaxValue","startValue","entryDisplayInput","onChangeStartValue","App","buttonName","useState","setDisplayValue","localStorage","getItem","setMaxValue","setStartValue","counterWrapper","toString","e","currentValue","currentTarget","buttonOnEntryDisplay","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdb39476.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text1\":\"EntryDisplay_text1__1FDRq\",\"valueWrapper\":\"EntryDisplay_valueWrapper__1JOMk\",\"entryDisplayInput\":\"EntryDisplay_entryDisplayInput__327CX\",\"error\":\"EntryDisplay_error__2q_cj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__9d9wG\",\"counterWrapper\":\"App_counterWrapper__2zKkY\",\"buttonsWrapper\":\"App_buttonsWrapper__3N4k6\",\"buttonOnEntryDisplay\":\"App_buttonOnEntryDisplay__d7Jv2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"Display_inputWrapper__2QYJS\",\"error\":\"Display_error__3o8P2\",\"default\":\"Display_default__1ium1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsWrapper\":\"Button_buttonsWrapper__2T2Ux\",\"button\":\"Button_button__3arLC\"};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayProps = {\r\n    displayValue: string\r\n    maxValue: string\r\n}\r\nexport const Display = (props: DisplayProps) => {\r\n    return (\r\n        <div className={s.inputWrapper}>\r\n            <input type=\"text\" value={props.displayValue}\r\n                   className={props.displayValue === 'Incorrect value!' || props.displayValue === props.maxValue ? s.default + ' ' + s.error : s.default}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonProps = {\r\n    onButtonClick: () => void\r\n    name: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n    return (\r\n        <div className={s.buttonsWrapper}>\r\n            <button onClick={props.onButtonClick} disabled={props.disabled} className={s.button}>{props.name}</button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './EntryDisplay.module.css'\r\n\r\ntype  EntryDisplayPropsType = {\r\n    maxValue: string\r\n    startValue: string\r\n    onChangeMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeStartValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\nexport const EntryDisplay = (props: EntryDisplayPropsType) => {\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div className={s.valueWrapper}>\r\n                <div className={s.text1}>Max value:</div>\r\n                <input type=\"number\" value={props.maxValue} onChange={props.onChangeMaxValue}\r\n                       className={props.maxValue < '0' || props.maxValue === props.startValue || +props.maxValue < +props.startValue ? s.entryDisplayInput + ' ' + s.error : s.entryDisplayInput}/>\r\n            </div>\r\n            <div className={s.valueWrapper}>\r\n                <div className={s.text1}>Start value:</div>\r\n                <input type=\"number\" value={props.startValue} onChange={props.onChangeStartValue}\r\n                       className={props.startValue < '0' || props.maxValue === props.startValue ? s.entryDisplayInput + ' ' + s.error : s.entryDisplayInput}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\nimport {Display} from \"./Components/Counter/Display/Display\";\nimport {Button} from \"./Components/Counter/Button/Button\";\nimport s from \"./App.module.css\"\nimport {EntryDisplay} from \"./Components/SetValueCounter/EntryDisplay/EntryDisplay\";\n\nfunction App() {\n\n    let buttonName = ['inc', 'reset', 'set']\n    let [displayValue, setDisplayValue] = useState<string>('0')\n    let [maxValue, setMaxValue] = useState<string>(localStorage.getItem('maxValue') || '0')\n    let [startValue, setStartValue] = useState<string>(localStorage.getItem('startValue') || '0')\n\n\n    function onButtonIncClick() {\n        let newValue = +displayValue + 1\n        setDisplayValue(newValue.toString())\n    }\n\n    function onButtonResetClick() {\n        setDisplayValue(startValue)\n    }\n\n    function onButtonSetClick() {\n        setDisplayValue(startValue)\n        localStorage.setItem('maxValue', maxValue)\n        localStorage.setItem('startValue', startValue)\n    }\n\n    function onChangeMaxValue(e: ChangeEvent<HTMLInputElement>) {\n        const currentValue = e.currentTarget.value\n        if (currentValue < \"0\") {\n            setDisplayValue('Incorrect value!')\n            setMaxValue(currentValue)\n\n        } else if (+currentValue <= +startValue) {\n            setDisplayValue('Incorrect value!')\n            setMaxValue(currentValue)\n        } else {\n            setDisplayValue(\"enter values and press 'set'\")\n            setMaxValue(currentValue)\n        }\n    }\n\n    function onChangeStartValue(e: ChangeEvent<HTMLInputElement>) {\n        const currentValue = e.currentTarget.value\n        if (currentValue < \"0\") {\n            setDisplayValue('Incorrect value!')\n            setStartValue(currentValue)\n\n        } else if (+currentValue >= +maxValue) {\n            setStartValue(currentValue)\n            setDisplayValue('Incorrect value!')\n        } else {\n            setDisplayValue(\"enter values and press 'set'\")\n            setStartValue(currentValue)\n        }\n    }\n\n\n    return (\n        <div className={s.App}>\n            {/*counter1*/}\n            <div className={s.counterWrapper}>\n                <Display displayValue={displayValue} maxValue={maxValue}/>\n                <div className={s.buttonsWrapper}>\n                    <Button onButtonClick={onButtonIncClick} name={buttonName[0]}\n                            disabled={displayValue === 'enter values and press \\'set\\'' || displayValue === 'Incorrect value!' || displayValue === maxValue}/>\n                    <Button onButtonClick={onButtonResetClick} name={buttonName[1]}\n                            disabled={displayValue === '0' || displayValue === 'Incorrect value!' || displayValue === 'enter values and press \\'set\\''}/>\n                </div>\n            </div>\n            {/*setValueCounter*/}\n            <div className={s.counterWrapper}>\n                <EntryDisplay maxValue={maxValue} startValue={startValue} onChangeMaxValue={onChangeMaxValue}\n                              onChangeStartValue={onChangeStartValue}/>\n                <div className={s.buttonOnEntryDisplay}>\n                    <Button onButtonClick={onButtonSetClick} name={buttonName[2]}\n                            disabled={displayValue === 'Incorrect value!'}/></div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}